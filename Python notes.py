# -*- coding: utf-8 -*-
"""Python Basic 30/07/2025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N8LNlrTuOZhfXAclMBn_E3OO_R5P_h_5

# Data Types:

There are three types of data that we store:

1. Numeric Data

2.Text Data

3.Boolean Data

# 1. Numeric Data
"""

#integers-positve and negative numbers including zero
num1=56
print(num1)

#type()-it tells us the type of data
print(type(num1))

#float-positive and negative decimal numbers
num2=80.5
print(num1)

print(type(num2))

"""# 2. Text Data

We called it as string.

we have to write string in either ' ' or " ".
"""

name="Mansoor"
name2='Jaspreet'
print(name)
print(name2)

print(type(name))
print(type(name2))

#if we enter any number in colun it will show as a string instead of float and int
email='123'
print(type(email))

"""# Boolean Data Type:

True or False |1 and 0

Note: when you are using Ture and False the T and F should nbe in capital.
"""

x=True
print(x)

y=False
print(y)

print(type(x))
print(type(y))

print(bool(0))

print(bool(1))

"""# Operators

Symbols that we used to perform some operations.

# Arithmetic Operator:

Any Mathematica calculation.
"""

x=10
y=20

#addition(+):
print(x+y)

#subtraction(-):
print(x-y)

#multiplication(*):
print(x*y)

#division(/):
print(x/y)  #10/20

#modulus(%):remainder of two numbers
print(x%y)

#floor division(//):it will give you the integer part
print(x//y)

#exponential(**):power operation
print(x**y)  #10**20

"""# Comparision Operator"""

x=5
y=10
z=10

#Greater than(>):
print(x>y)

#less than(<):
print(x<y)

#greater than equals to(>=):
print(y>=z)

#lesss than equals to(<=):
print(x<=z)

# Double Equals to(==)-
print(x==y)    #=-assignment operator
#= assignment == comparison

#not equals to(!=):
print(x!=y)  #5!=10

"""# Assignment opperator"""

#equals to(=):
x=10

#(+=):
x+=10 #incrementing my x value by 10   #x=x+10
print(x)

#(-=):
x-=5   #decrementing my x by 5
print(x)


x-=10
print(x)

x+=15
print(x)

#*=
x*=10
print(x)

#/=
x/=20
print(x)

"""# Logical Operators:

OR AND NOT


"""

#OR:If any statement is True then my ans will be True
x=20
y=30
print(x>y or y>x)

#and:If both the statement will be true then my ans will be True.
print(x>y and y>x)   #F and T

#Not -Just the opposite
x=True
print(not x)

"""# Membership Operator:

in and not in
"""

basket=['mango','apple','pineapple','orange','watermelon','banana']
print('apple' in basket)

print('kiwi' not in basket)

"""# Mutable:If i can do any change (add,delete or update) after creation then those datatypes will called as Mutable.

# Immutable:If i can not do any changes(add,delete or update) after creation then those datatypes will called as Immutable.

# Sequential Data Types:

List

Tuple

Strings

# Unsequential Data Types:

Dictionary

Sets

# Dictionary:

Pair of key value.

We use { } to create a dictionary.

It is Mutable.
"""

# i want to store a person's details-,name,age,address,job.
#syntax-
#dictname={key1:value1,key2:value2,key3:value3.....}
person={'name':'Raj','age':20,'address':'Bangalore','job':'Data Scientist'}
print(person)

#if i want to check the job of the person
print(person['job'])

# i want to change my job to Ai Engineer
person['job']='AI Engineer'

print(person)

print(person['job'])

# i want to add salary of the person
person['Salary']=50000

print(person)

# i want tp delete my job
del person['address']

print(person)

# Methods in Dictionary:
#keys():It will give us all the keys present in my dictionary
print(person.keys())

#values():It will give us all the values present in my dictionary
print(person.values())

#items():It will give you the key and value together
print(person.items())

"""# Sets:

Set is the collection of unique element.

It has no order.(unordered).

We use { } to create sets.

It is mutable
"""

# Syntax:
#setname={value1,value2,value3,value4.....}
s1={1,2,3,'pranav','ayush','raj',40,10,10,'pranav'}
print(s1)

# methods in set
#add():
s1.add(30)

print(s1)

s1.add(57)

print(s1)

s1.add(100)

print(s1)

#remove()
s1.remove(40)

print(s1)

#union()-It will give all the elements present in both sets
s1={1,2,3,4}
s2={4,5,6,7}
s1.union(s2)

#intersection()-It will give the common element present in both the sets
s1.intersection(s2)

#Problems with sets:
#1.Unordered
#2.can't acess specific value
#3. Duplicates are not allowed

"""# List:

List is the collection of elements of different datatype .It is ordered and allows duplicates.In list we have indexing.

We use [ ] to create a list.

It is Mutable.
"""

basket=[10,40,20,'aditya',90,10,'ketaki']
print(basket)

"""# Indexing:

It is used to access the particular element in the list.

positive Indexing starts from 0.

Negative indexing starts from -1.
"""

#-6   -5  -4   -3   -2   -1
#    0  1  2  3  4  5
li=[10,20,30,40,50,60]
print(li)

# Positive indexing
print(li[3])

print(li[1])

#Negative Indexing
print(li[-3])

print(li[-5])

"""# Slicing

[start index:end Index:step]

If you want to access the part of the list.

start index will be the index value from where you want to start slicing.

end index will be +1 to the index value where you want to end your slicing.
"""

li=[10,20,30,40,50,60]
print(li)

# to get the element from 20-50
#positive slicing
print(li[1:5])

print(li[1:6])

#negative slicing
print(li[-5:])

#if you want to start your slicing from the start you can skip the starting index.
li=[10,20,30,40,50]
print(li[:4])

#if you want to go till last you can skip the end index
li[2:]

#full list:
li[:]

li

#10,50
print(li[::4])

li=[1,2,3,4,5,6,7,8,9,10]
#a.Print all the even numbers from the list
  # start:end:step
print(li[1::2])

#b.Print all the odd numbers from the list.
print(li[0::2])

#Methods in List:
#len()-it tells the total number of element present in the list
li=[1,2,3,4,5,6,7,8,9,10]
print(len(li))

li=['tea','maggie','juice','coffee']
print(li)

#i want to add biryani to my list
#append()-it adds the element in the end of the list
li.append('Biryani')

print(li)

#if i want to add toffee after coffee
#insert(index,element)-It adds the element at a particular index
li.insert(4,'toffee')

print(li)

# i want to change juice to protien shake
li[2]='protien shake'

print(li)

#remove()
#i want to remove maggie from my list
li.remove('maggie')

print(li)

#pop()-it will delete the element by index number
li.pop(2)

print(li)

#index()-It will give you the index number of an element
li.index('toffee')

"""# Tuple:

It also used to store different types of data.

It is ordered it allows indexing.

We use () to create tuple.

Tuple is immutable.
"""

tu=(1,2,3,'raj','sumit',10,10)
print(tu)

tu[3]

tu[3]='Mansoor'

# Methods in tuple:
# count:It will count the  frequency of a particular element
tu=(1,2,3,4,10,30,10,2)
tu.count(10)

# index:
tu.index(2)

tu.index(4)

"""# Strings:

text data

It follows indexing and slicing.

Strings are immutable
"""

#     01234567891011
name='Gopika Priya'
print(name)

name[:6]

name[7]='L'

#Methods in strings:
# Upper():Convert all the letter in uppercase
name='Samikshit Sharma'
print(name.upper())

text='hello'
#       he         L             lo
text=text[:2]+text[2].upper()+text[3:]
print(text)

#lower():Converts all the letter in lowercase
name.lower()

#capitalize():It will capitalize the first letter of the string
name
name.capitalize()

#title():It will capitalize all the first character of the string
text='Introduction to python'
text.title()

#strip():It will remove whitespaces from the string
name='    ra'
name.strip()

"""# User input"""

#input():it takes the input from the user
name='raj'
print(name)

name=input('Enter your name')
print(name)
print(type(name))
# input method will take only the string input

number=int(input('Enter the number'))
print("Number=",number)

#number=float(input('Enter the number))
#print(number)

"""# Conditional Statement:

If,else,elif
"""

#if you see a red light go staright else go right
#if:
#syntax:
#if condition:
    #statement
age=12
if age>18:
  print('You are eligible to vote')

# else:If any statement will not work then my else block will be executed
age=int(input('Enter your age'))
if age>18:
  print('You are eligible to vote')
else:
  print('You are not eligible to vote')

#elif:if we have multiple conditions:
age=int(input('Enter your Age'))
if age>=13 and age<=19:
  print('You are a teenager')
elif age>19 and age<=50:
  print('You are an adult')
elif age>50:
  print('You are a senior citizen')
else:
  print('You are a minor')

"""# Loops"""

print('Hello World')
print('Hello World')
print('Hello World')
print('Hello World')
print('Hello World')
print('Hello World')
print('Hello World')
print('Hello World')
print('Hello World')
print('Hello World')

"""While loop,For Loop

# While loop:When we don't Know how many times i want to do a task.
"""

count=0
while count<50:    #0<50   #1<50   #2<50
  print(count)
  count+=1  #count=1   #count=2   #count=3

fruits=['banana','apple','cherry','pineapple']
i=0
while i<len(fruits):  #0<4
  print(fruits[i])  #fruits[0]
  i+=1

len(fruits)

fruits[0]

fruits[1]

"""# For loop: When we know how many times i want to do a particular task."""

for x in range(10):      #this x is nothing just a variable which default is 0
  print("Hello world",i)

for i in range(1,12):
  print("Hello world",i)

# print the even numbers from 1-50
for i in range(2,51,2):
    print(i)

text=['banana','apple','cherry']
for i  in text:
  print(f"{i}")   #fstrings

name="Ketaki"
print(f"Hello {name}")

"""# Control flow statement:

break,continue,pass

# Break-Stop the execution of code.
"""

for i in range(1,11):
  print(i)
  if i==6:
    break

"""# Continue:Skips the iteration."""

for i in range(1,11):
  if i==4 or i==7:
    continue
  print(i)

"""# Pass:If you have not decided what to do at a particular iteration then we can use pass statement because we cannot keep it empty"""

for i in range(1,11):
  if i==6:
    pass

  print(i)

"""# Functions:

It is block of code  that performs a specific task.

It is a reusable block of code.

Example:Think of it like a washing machine:

you put the clothes(input).

press a button(call the function)

It washes the clothes(perfrom the task).

You get the clean clothes(output).

# Types of function:

1.**Built in Function**:

Already provided by python.
"""

print("hello world")

li=[1,2,3,4,5]
len(li)

li=[1,2,3,4,5]
sum(li)

"""2. User defined Functions:

Those function which are defined by the user.

keyword:def
"""

#defining a function
def function_name():
  print('Hello world')

#call the function
function_name()

"""# Example 1:Function with no Parameters"""

def greet():
  print("Good Morning")

greet()

"""# Example 2:Function with Parameters"""

def greet(name):
  print("Good Morning",name)

greet("Raj")

def add(a,b):
  print(a+b)

x=add(2,3)
print(x)

"""# Example 3: Function that Returns a Value"""

def add(a,b):
  return a+b

x=add(4,5)
print(x)

def multiply(a,b):
  return a*b

multiply(4,5)

def hello():
  print("Hello")

x=hello()
print(x)

def hello():
  return "Hello"

x=hello()
print(x)



# -*- coding: utf-8 -*-
"""Python Basic Handson 06/08/2025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1osv8dHre2oAEJBQsx8Rm5dkSb-5QB3fy

1. Write a code to swap two varaiables without using a third variable.

a=20
b=10


a=10
b=20
"""

a=20
b=10
print("a=",a,"b=",b)
a,b=b,a     #assign values to a varaible
print("a=",a,"b=",b)

"""2. Check if a number is positive, negative or Zero."""

num=int(input("Enter the number"))
if num>0:
  print("It is a positive number")
elif num<0:
  print("It is a negative number")
else:
  print("Zero")

"""3. Find the greatest of three numbers."""

a=int(input("Enter the first number"))
b=int(input("Enter the second number"))
c=int(input("Enter the third number"))
if a>=b and a>=c:
  print('a is greater')
elif b>=a and b>=c:
  print('b is greater')
else:
  print('c is greater')

"""4. Write a code to reverse a string.

name='Mansoor'

Output:roosnaM
"""

name='Mansoor'
rev=name[::-1]
print(rev)

name='Mansoor'
rev=''
for i in name:
  rev=i+rev
print(rev)

name='Mansoor'
i=len(name)-1     #i=7-1,i=6    ('r')
rev=''
while i>=0:
  rev+=name[i]        #name[6]='r'    name[5]='ro'   name[4]='roo'
  i-=1

print(rev)

"""5. Write a code to sum of all the digits of a number.

num=234

output-2+3+4=9
"""

num=234
sum=0

while num>0:
  sum+=num%10
  num//=10
print(sum)

234%10

234//10

"""6. Write a code to check whther a number is an armstrong number or not.

ex-153
   1^3+5^3+3^3=153
"""

num=int(input("Enter the number"))
sum=0
temp=num
power=len(str(num))
while temp>0:
  digit=temp%10
  sum+=digit**power
  temp//=10
if sum==num:
  print("It is an armstrong number")
else:
  print("It is not an armstrong number")

"""7.Create a calculator program for addition,subtraction,multiplication and division..Take the input from the user and choice of operation."""

def addition(a,b):
  return a+b
def subtraction(a,b):
  return a-b
def multiplication(a,b):
  return a*b
def division(a,b):
  return a/b


a=int(input("Enter the first number"))
b=int(input("Enter the second number"))
choice=input("Enter your choice")


if choice=="+":
  print("Result=",addition(a,b))
elif choice=="-":
  print("Result=",subtraction(a,b))
elif choice=="*":
  print("Result=",multiplication(a,b))
elif choice=="/":
  print("Result=",division(a,b))
else:
  print("Invalid Choice")

"""write a code to check whthere a number isa prime number or not."""

#Homework



# -*- coding: utf-8 -*-
"""OOPS 11/08/2025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KYFaNGbY1bX0dV6m4nF7tMfz4RXJ9tVw

# Lambda Functions:In Lambda function we write the code in one line.

keyword:lambda
"""

#lambda parametres:statement

#squaring code
#Normal function
def square(num):
  return num**2

square(100)

#lambda fucntion
square=lambda num:num**2
print(square(3))

check_even=lambda num:"Even" if num%2==0 else "odd"
print(check_even(100))

"""# OOPS:Object oriented Programming

We are creating classes to write our program.

To access the properties/functions of our classes we are taking help of students.

This students are nothing but the object.

With the help of objects we are able to access the function of my class.

# Class Creation
"""

#syntax-class nameofClass
class Fifth:
  def syllabus(self):
    print("There are total 6 subjects in my class")

  def exams(self):
    print("Our exam will be conducted on 9th August")

  def teacher(self):
    print("Lavanya is my teacher")

"""# Object Creation"""

#syntax-objectname=classname()
stud1=Fifth()

stud1.exams()

stud1.teacher()

stud1.syllabus()

stud2=Fifth()

stud2.exams()

stud2.teacher()

stud2.syllabus()

li=[1,2,3,4,5]
print(li)

li.append(23)

print(type(li))

help(list)   #list is your class

"""# Self Keyword:

Is is nothing but the refrence of your object.
"""

class Ninth:
  def details(self,name,age):
    self.name=name
    self.age=age

  def subjects(self):
    print("There are 9 subjects in my class")

stud1=Ninth()

stud1.details("Ayush",20)

stud2=Ninth()

stud2.details('Samikshit',26)

stud3=Ninth()

stud3.details('Neha',17)

#Class Creation-->done
#Object Creation-->done
#self keyword-->done

class HouseBuild:
  def essentials(self):
    print('I need brick , sand ,tiles,money')

  def land_area(self):
    print("I need the size of the land")

  def architecture(self):
    print('Here we will design your house')

  def interior(self):
    print('Giving a design to your house')

#Code Reusability
#Code redability    --Advantages of oops

"""# Constructor is a special type of fxn that executes by default whenever we create the object of our class.

Whenever we have such fxns that is mandatory for every object of our class then we use constructor.
"""

class RegistrationForm:
  def __init__(self,name,address,adhar_number):     #__init__ we use to create a constructor
    self.name=name
    self.address=address
    self.adhar_number=adhar_number

  def portal(self):
    print('You can access the portal')

  def update_details(self):
    print('You can update your details')

#person 1 came
per1=RegistrationForm("Raj","bangalore",33843380)

per1.portal()

per1.update_details()

#person2 cames
per2=RegistrationForm("prakhar","bangalore",8779382)

per2.portal()

per2.update_details()

# person 3 came he said he dont fill his details
per3=RegistrationForm()

per3.portal()

per3.update_details()

"""Some orders from higher authority cames that no one can access the other functions untill he fills his details."""

#Pillers of oops

"""Create a Hotel Class and in that class make a function that is mandatory that function should greet the guest who came to the hotel."""

class Hotel:
  def __init__(self):
    print("Good Evening Mam/Sir,Welcome to the Hotel")

  def room(self):
    print("You can book your room")

  def food(self):
    print("You can have your food")

guest1=Hotel()

guest1.room()

guest1.food()

guest2=Hotel()

guest2.room()

guest2.food()

"""# Pillers of OOPS"""

#1. Inhertitance
#2. Polymorphism
#3. Encapsulation
#4. Abstarction

"""# Inheritance:When One class Inherit the other class so that the object of that class can access the fucntion of the parent class."""

class Father:   #The class that we inherit is called as parent class
  def house(self):
    print("This is our house")

  def car(self):
    print('This is our car')

class Son(Father):     #Inherit the Father class in son class , This is your child class
  def room(self):
    print("This is my room")

  def bike(self):
    print("This is my bike")

ob=Son()
ob.room()
ob.bike()
ob.house()

"""# Hierarichal Inheritance:In this we have one parent class and multiple child class."""

class Teacher:
  def python(self):
    print("Here you can find your python modules")

  def dsa(self):
    print("Here you can find your dsa modules")

class Online_Teaching(Teacher):
  def timings(self):
    print("Your timings is between 9:00 to 4:00 PM")

  def exams(self):
    print("Your exams is conducted on 24th August")

class Offline_Teaching(Teacher):
  def syllabus(self):
    print("There are 8 subjects in our syllabus")

  def timings(self):
    print("Your timings is between 7:00 to 2:00 PM")

Raj=Online_Teaching()
Abdul=Offline_Teaching()
Lavanya=Teacher()

Raj.exams()
Raj.timings()
Raj.dsa()
Raj.python()

Abdul.timings()
Abdul.syllabus()
Abdul.dsa()
Abdul.python()

"""# Multiple Inheritance:We have multiple parent class ."""

class Father:
  def house(self):
    print('This is our house')

  def car(self):
    print("This is our car")

class Mother:
  def scooty(self):
    print("This is our scooty")

  def recipie(self):
    print("This is our recipie")

class Son(Father,Mother):
  def bike(self):
    print("This is my bike")

  def phone(self):
    print('This is my phone')

ob=Son()
ob.bike()
ob.phone()
ob.house()
ob.car()
ob.recipie()
ob.scooty()

"""# Multilevel Inheritance"""

class IIT:
  def classes(self):
    print("These are our classes")

  def professors(self):
    print("You can get the chance to learn by the iit professors")

class Intellipaat(IIT):
  def courses(self):
    print("This is our courses")

  def sessions(self):
    print("These are our sessions")

class learners(Intellipaat):
  def LMS(self):
    print("You can access the lms")

  def whatsapp_grp(self):
    print("This is our whatsapp grp")

raj=learners()
raj.LMS()
raj.whatsapp_grp()
raj.courses()
raj.sessions()
raj.professors()
raj.classes()

"""# Hybrid Inheritance:The combination of two or more type of inheritance is called as a hybrid Inheritance."""

class Grandfather:
  def property(self):
    print("This is our property")
  def car(self):
    print("This is our car")

class Father(Grandfather):
  def house(self):
    print("This is our house")
  def bike(self):
    print("This is our bike")

class Mother(Grandfather):
  def recipie(self):
    print("This is our recipie")
  def scooty(self):
    print("This is our scooty")

class Son(Father,Mother):
  def room(self):
    print("This is my room")

  def phone(self):
    print('This is my phone')

ob=Son()
ob.bike()
ob.recipie()
ob.property()

"""# Polymorphism: Poly means many and morph means form.

Polymorphism means same name different behaviour depending on the use case.
"""

# Method Overloading:If we have two functions with the same name then which function will get called depends on the number of parameters we passed in that .

# Method Overriding:If we have two functions with the same name then the function which we latestly created that one get called

def sum(a,b):   #2 parametrs
  return a+b

def sum(a,b,c):   #3 parameters
  return a+b+c

def sum(a,b,c,d):
  return a+b+c+d

sum(2,3,4,5)
#Method overloading is not supported in Python

class Rectangle:
  def __init__(self,length,width):
    self.length=length
    self.width=width

  def area(self):
    return self.length*self.width

class Square:
  def __init__(self,side):
    self.side=side

  def area(self):
    return self.side*self.side

ob=Rectangle(12,16)

ob.area()

ob1=Square(12)

ob1.area()

class Dog:
  def speak(self):
    print("Bark")

class Cat:
  def speak(self):
    print("Meow")

Sheru=Dog()
Sheru.speak()

Pinky=Cat()
Pinky.speak()

"""# Encapsulation: Protecting the Data by hiding it."""

class Bank:
  def deposit(self):
    print('You can deposit your cash here')

  def withdraw(self):
    print("You can withdraw your cash here")

  def loans(self):
    print('You can apply for loans')

  def __locker(self):      #__ this is used to make your function private
    print('You can access the jwelley cash,gold here')

  def manager(self):
    print("How can i help you?")
    self.__locker()

Mansoor=Bank()

Mansoor.deposit()

Mansoor.withdraw()

Mansoor.loans()

Mansoor.manager()

Mansoor.locker()

"""# Abstraction: Hides the unnecessary things from the user and showing only the necessary things."""

from abc import ABC,abstractmethod   #Abstact Base Class
class Car(ABC):    #By inheriting the ABC class in my car class so now my Car class is also an abstarct class
  @abstractmethod
  def engine_start(self):
    pass

  @abstractmethod
  def engine_stop(self):
    pass

  @abstractmethod
  def headlights_on(self):
    pass

  @abstractmethod
  def headlight_off(self):
    pass

class Hundai(Car):
  def engine_start(self):
     print("Engine started")

  def engine_stop(self):
    print("Engine stopped")

  def headlights_on(self):
    print("Headligh Onn")

  def headlight_off(self):
    print("Headlights Off")

ob=Hundai()
ob.engine_start()
ob.engine_stop()

# -*- coding: utf-8 -*-
"""OOPS Handson 14/08/2025 .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d6wb02VIijGNeq7Dor2IXVVtwRwd3ECq

Q1. Create a class Employee that takes two attributes name and salary as input from the user and show them with a display function.
"""

class Employee:
  def __init__(self,name,salary):
    self.name=name
    self.salary=salary

  def display(self):
    print("Name:",self.name,"Salary:",self.salary)

user_name=input("Enter the name")
user_salary=int(input("Enter the salary"))

ob=Employee(user_name,user_salary)

ob.display()

"""Q2. Create a base class Employee with a fucntion get_role().Override this fucntion in the derived Manager Class."""

class Employee:
  def get_role(self):
    print("Employee")

class Manager(Employee):
  def get_role(self):
    print("Manager")

ob=Employee()

ob.get_role()

ob1=Manager()

ob1.get_role()

"""Q3. Create a class ATM that has initial balance 0 and it should be private.Then create methods for deposit some cash,withdraw some cash and check balance."""

class ATM:
  def __init__(self):
    self.__balance=0

  def deposit(self,amount):
    self.__balance+=amount
    print("Deposited:",amount)

  def withdraw(self,amount):
    if self.__balance>=amount:
      self.__balance-=amount
      print("Withdawn:",amount)

    else:
      print("Insufficient balance")

  def check_balance(self):
    print("Balance:",self.__balance)

samikshit=ATM()
samikshit.deposit(1000)
samikshit.withdraw(500)
samikshit.deposit(2000)
samikshit.withdraw(900)
samikshit.check_balance()
samikshit.withdraw(1700)

"""Q4. Create an abstarct class Payment with methods make_payment().Implement it in UPIPayment and CardPayment class."""

from abc import ABC,abstractmethod
class Payment(ABC):
   @abstractmethod
   def make_payment(self,amount):
    pass

class UPIPayment(Payment):
  def make_payment(self,amount):
    print("Paid:",amount,"Using UPI")

class CardPayment(Payment):
  def make_payment(self, amount):
    print('Paid:',amount,"using Card")

upi=UPIPayment()
card=CardPayment()

upi.make_payment(200)

card.make_payment(100)

"""Q: Create a class Login that checks if the entered username and password matches the stored value."""

class Login:
  def __init__(self):
    self.username='admin'
    self.password='hello123'

  def check_login(self):
    u=input("Enter the username")
    p=input("Enter the password")
    if u==self.username and p==self.password:
      print("Login Successful")

    else:
      print("Invalid Credentials")

Dhananjay=Login()

Dhananjay.check_login()

Dhananjay.check_login()

